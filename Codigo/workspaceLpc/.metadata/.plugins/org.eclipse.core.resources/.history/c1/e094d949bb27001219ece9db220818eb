/*
 * Core.c
 *
 *  Created on: Sep 26, 2012
 *      Author: "Facundo Nahuel Uriel Silva"
 */

#include "taskCore.h"
#include "Tasks/SdCard/ff.h"

uint8_t spi_div_low = 250;
uint8_t spi_div_high = 10;

static void SetSPIClocks(uint32_t low, uint32_t high)
{
	spi_div_low  = SystemCoreClock / low;
	spi_div_high = (SystemCoreClock+high-1) / high;

	if(spi_div_low & 1) spi_div_low++;
	if(spi_div_high & 1) spi_div_high++;
}

void taskCore(void *paramametro){

	const portTickType xDelay = 2000 / portTICK_RATE_MS;

//	msgPcCom msgTX;
	msgPcCom msgRX;
	msgPcCom msgTXAck;

	FIL file;
	FRESULT res;
	UINT written;

	res = f_mount(0, &fs);

	LPC_GPIO0->FIODIR |= 1<<22;
	LPC_GPIO0->FIOCLR |= 1<<22;

	LPC_SC->PCLKSEL0 &= ~(3<<2);
	LPC_SC->PCLKSEL0 |= 1<<2;

	SetSPIClocks(KHZ(400), MHZ(1));

	LPC_UseOscillator(LPC_MAIN_OSC);
	LPC_SetPLL0(100000000);

	LPC_SC->PCLKSEL1 = (LPC_SC->PCLKSEL1 & ~(3<<18)) | (1<<18);

	res = f_open(&file, "Facundo.txt", FA_CREATE_NEW | FA_WRITE);
	res = f_write(&file, "Hello world!!!", strlen("Hello world!!!"), &written);
	res = f_close(&file);

	// Se inicializa el mensaje
//	pcComInitMsg(&msgTX.cmd,CMD_PCCOM_READ_ADC_1);
	pcComInitMsg(&msgTXAck.cmd,CMD_PCCOM_ACK);

//	msgTX.cmd.data[0] = 0x00;
//	msgTX.cmd.len = 1;

	while(1){


//
//		// Start A/D conversion for on AD0.0
//		LPC_ADC->ADCR = START_ADC | OPERATIONAL_ADC | SEL_AD0 ;
//
//		do {
//			adval = LPC_ADC->ADGDR;            // Read A/D Data Register
//		} while ((adval & ADC_DONE_BIT) == 0); // Wait for end of A/D Conversion
//
//		// Stop A/D Conversion
//		LPC_ADC->ADCR &= ~(START_ADC | OPERATIONAL_ADC | SEL_AD0) ;
//
//		// Extract AD0.0 value - 12 bit result in bits [15:4]
////		adval = (adval >> 4) & 0x0FFF ;
//		adc0val = (uint8_t)(adval & 0x000000FF);
//
//		msgTX.idMsg++;
//		msgTX.cmd.data[0] = adc0val;
//
//
//		xQueueSend(queuePcComTX,&msgTX,1000);

		// se intenta leer un mensaje de la cola. El numero de elementos en la cola se decrementa en 1
		if(xQueueReceive(queuePcComRX,&msgRX,1000)){

			xQueueSend(queuePcComTX,&msgTXAck,1000);

			switch(msgRX.cmd.cmdId){

				case CMD_PCCOM_LED_RED_ON:
					LPC_GPIO2->FIOSET = (1<<0); // red
					break;

				case CMD_PCCOM_LED_RED_OFF:
					LPC_GPIO2->FIOCLR = (1<<0); // red
					break;

				case CMD_PCCOM_LED_BLUE_ON:
					LPC_GPIO0->FIOSET = (1<<26); // blue
					break;

				case CMD_PCCOM_LED_BLUE_OFF:
					LPC_GPIO0->FIOCLR = (1<<26); // blue
					break;

				case CMD_PCCOM_LED_GREEN_ON:
					LPC_GPIO2->FIOSET = (1<<1); // green
					break;

				case CMD_PCCOM_LED_GREEN_OFF:
					LPC_GPIO2->FIOCLR = (1<<1); // green
					break;
			}


		}

		vTaskDelay( xDelay );

//		msgTX.idMsg++;
//		msgTX.cmd.data[0]++;

		taskYIELD();
	}
}
