
#include "lcd_buffer.h"

// buf_clear - clear every pixel in the buffer
//
void buf_clear(void)
{
	unsigned char *p;
	unsigned char i=0;

	p = lcd_buffer;
	do {
		*p++ = 0;
		*p++ = 0;
		*p++ = 0;
		*p++ = 0;
		i--;
	} while (i);
}


// buf_putchar - draw a character to the LCD buffer.  The position
// 	is set by buf_x and buf_y.  The font used is controlled by
// 	buf_font.  The font data is just a list of shape data, so
// 	all this function does is find the address of the shape
// 	and then call buf_draw.
//
void buf_putchar(unsigned char c)
{
	unsigned char first, num;
	unsigned char *font;

	font = buf_font;
	first = *font++;
	if (c < first) return;
	c -= first;
	num = *font++;
	if (c >= num) return;
#ifdef FAST_FONT_INDEX
	buf_draw(buf_font + (font[c * 2] | (font[c * 2 + 1] << 8)));
#else
	while (c) {
		num = *font++;
		font++;
		if (num & 0x80) font++;
		font += ((num & 0x1F) + 1) * (((num & 0x60) >> 5) + 1);
		c--;
	}
	buf_draw(font);
#endif
}


// buf_draw - draw a shape to the LCD buffer.  Shapes may be up
// to 32 by 32 pixels.  After drawing, buf_x is advanced automatically.
// buf_y is not changed, even if the shape is only drawn partially
// due to the right edge of the screen.
//
void buf_draw(unsigned char *shape)
{
	unsigned char *buf;
	unsigned char width, height, y_offset, tmp;
	signed char lead, trail;
	unsigned char y_abs, y_shift, i,j;

	// unpack the 2 or 3 byte character size info
	tmp = *shape++;
	width = (tmp & 0x1F) + 1;
	height = ((tmp >> 5) & 0x3) + 1;
	if (tmp & 0x80) {
		y_offset = *shape++;
		tmp = *shape++;
		lead = (tmp >> 4) - 4;
		trail = (tmp & 15) - 5;
	} else {
		tmp = *shape++;
		y_offset = (tmp >> 5);
		tmp &= 0x1F;
		lead = (tmp / 6) - 1;
		trail = (tmp % 6) - 2;
	}
	// font info:  (2 or 3 bytes)
	//	width (in pixels)	1 to 32		5 bits
	//	height (in bytes)	1 to 4		2 bits
	//	offset format		short or long	1 bit
	//
	// short offset format
	//	y_offset (pixels)	0 to 7		3 bits
	//	leading space		-1 to 3	 	2.33 bits
	//	trailing space		-2 to 3		2.6 bits
	//
	// long offset format
	//	y_offset (pixels)	0 to 31		5 bits
	//	leading space		-4 to 11	4 bits
	//	trailing space		-5 to 10	4 bits

	//apply the x leading space
	if (lead >= 0 || buf_x >= -lead) buf_x += lead;
	if (buf_x > 127) buf_x = 127;

	// y position for top of character
	y_abs = (buf_y + y_offset) >> 3;
	if (y_abs > 7) return;
	y_shift = (buf_y + y_offset) & 7;

	for (i=0; i<width; i++) {
		for (j=0; j<height; j++) {
			buf_pixel_off(buf_x + i, buf_y + j);
		}
	}

	buf = lcd_buffer + buf_x + y_abs * 128;
	// copy the pixel data into the buffer, shifting as necessary
	do {
		buf = lcd_buffer + buf_x + y_abs * 128;
		for (i=0; i<width; i++) {
			if (buf_x <= 127) {
				*buf |= (*shape << y_shift);
				if (y_abs < 7) {
					*(buf + 128) |= (*shape >> (8 - y_shift));
				}
				buf++;
			}
			buf_x++;
			shape++;
		}
		if (--height == 0) break;
		if (++y_abs > 7) break;
		buf_x -= width;
	} while (1);

	// apply trailing space
	buf_x += trail;
	if (buf_x > 127) buf_x = 127;
}

// buf_putchar - draw a character to the LCD buffer.  The position
// 	is set by buf_x and buf_y.  The font used is controlled by
// 	buf_font.  The font data is just a list of shape data, so
// 	all this function does is find the address of the shape
// 	and then call buf_draw.
//
unsigned char BuffGetCharDim(unsigned char c)
{
	unsigned char first, num;
	unsigned char *font;
	unsigned char *buf;
	unsigned char *shape;
	unsigned char width, height, y_offset, tmp;
	signed char lead, trail;
	unsigned char y_abs, y_shift, i;
	unsigned char x_dim, y_dim;
	unsigned int dimension;

	font = buf_font;
	first = *font++;
	if (c < first) return;
	c -= first;
	num = *font++;
	if (c >= num) return;
#ifdef FAST_FONT_INDEX
	shape = buf_font + (font[c * 2] | (font[c * 2 + 1] << 8));
#else
	while (c) {
		num = *font++;
		font++;
		if (num & 0x80) font++;
		font += ((num & 0x1F) + 1) * (((num & 0x60) >> 5) + 1);
		c--;
	}
	shape = font;
#endif

	// unpack the 2 or 3 byte character size info
	tmp = *shape++;
	width = (tmp & 0x1F) + 1;
	height = ((tmp >> 5) & 0x3) + 1;
	if (tmp & 0x80) {
		y_offset = *shape++;
		tmp = *shape++;
		lead = (tmp >> 4) - 4;
		trail = (tmp & 15) - 5;
	} else {
		tmp = *shape++;
		y_offset = (tmp >> 5);
		tmp &= 0x1F;
		lead = (tmp / 6) - 1;
		trail = (tmp % 6) - 2;
	}
	x_dim = 0;
	y_dim = height;
	// font info:  (2 or 3 bytes)
	//	width (in pixels)	1 to 32		5 bits
	//	height (in bytes)	1 to 4		2 bits
	//	offset format		short or long	1 bit
	//
	// short offset format
	//	y_offset (pixels)	0 to 7		3 bits
	//	leading space		-1 to 3	 	2.33 bits
	//	trailing space		-2 to 3		2.6 bits
	//
	// long offset format
	//	y_offset (pixels)	0 to 31		5 bits
	//	leading space		-4 to 11	4 bits
	//	trailing space		-5 to 10	4 bits

	//apply the x leading space
	if (lead >= 0 || x_dim >= -lead) x_dim += lead;
	// if (x_dim > 127) x_dim = 127;

	// y position for top of character
	y_abs = (y_dim + y_offset) >> 3;
	if (y_abs > 7) return;
	y_shift = (y_dim + y_offset) & 7;
	//printf("height= %d",height);
	// copy the pixel data into the buffer, shifting as necessary
	do {
		buf = lcd_buffer + x_dim + y_abs * 128;
		for (i=0; i<width; i++) {
			if (x_dim <= 127) {
				//*buf |= (*shape << y_shift);
				if (y_abs < 7) {
				//	*(buf + 128) |= (*shape >> (8 - y_shift));
				}
				buf++;
			}
			x_dim++;
			shape++;
		}
		if (--height == 0) break;
		if (++y_abs > 7) break;
		x_dim -= width;
	} while (1);
	//printf("shift= %d abs=%d\n",y_shift,y_abs);
	y_dim = (y_abs << 3) + y_shift;
	// apply trailing space
	x_dim += trail;
	// if (x_dim > 127) x_dim = 127;
	dimension = x_dim;
	return dimension;

}


// buf_pixel - turn on a single pixel in the LCD buffer.  This is
// intended to be called with a macro combines both X and Y
// coordinates into a single 16 bit integer.  Normally, you would
// call this as:
//
//	buf_pixel(x, y);
//
void buf_pixel_i(unsigned int x_and_y)
{
	unsigned char x, y;

	x = x_and_y & 127;
	y = x_and_y >> 8;
	*(lcd_buffer + x + ((y & 0x38) << 4)) |= bitmask[y & 7];
}


void buf_pixel_off_i(unsigned int x_and_y)
{
	unsigned char x, y;

	x = x_and_y & 127;
	y = x_and_y >> 8;
	*(lcd_buffer + x + ((y & 0x38) << 4)) &= ~bitmask[y & 7];
}

// buf_line - draw a line between two points.  This is intended to
// called with a macro that combines all 4 coordinates into a 32 bit
// long.  Normally, you would call this as:
//
//	buf_line(x1, y1, x2, y2);
//
void buf_line_d(unsigned long two_pts)
{
	unsigned char x1, y1, x2, y2, tmp;
	unsigned char *p;
	unsigned int slope, x_accum;

	x1 = two_pts & 127;
	y1 = (two_pts >> 8) & 63;
	x2 = (two_pts >> 16) & 127;
	y2 = (two_pts >> 24) & 63;

	if (x1 == x2) {
		// vertical line
		if (y1 > y2) {
			tmp = y1; y1 = y2; y2 = tmp;
		}
		tmp = bitmask[y1 & 7];
		p = lcd_buffer + x1 + ((y1 & 0x38) << 4);
		y1 = y2 - y1 + 1;
		do {
			*p |= tmp;
			tmp = ((tmp >> 7) | (tmp << 1));
			if (tmp & 1) p += 128;
		} while (--y1);
		return;
	}
	if (x1 > x2) {
		tmp = y1; y1 = y2; y2 = tmp;
		tmp = x1; x1 = x2; x2 = tmp;
	}
	if (y2 == y1) {
		// horizontal line
		tmp = bitmask[y1 & 7];
		p = lcd_buffer + x1 + ((y1 & 0x38) << 4);
		x1 = x2 - x1 + 1;
		do {
			*p++ |= tmp;
		} while (--x1);
		return;
	}
#ifdef SUPPORT_DIAGONAL_LINES
	  else if (y2 > y1) {
		// diagonal line, sloping downward
		down = 1;
		tmp = y2 - y1;
	} else {
		// diagonal line, sloping upward
		down = 0;
		tmp = y1 - y2;
	}
	slope = ((x2 - x1) << 8) / tmp;
	tmp = bitmask[y1 & 7];
	p = lcd_buffer + x1 + ((y1 & 0x38) << 4);
	if (slope >= 256) {
		x_accum = slope / 2;
		x1 = x2 - x1 + 1;
		do {
			*p++ |= tmp;
			x_accum += 256;
			if (x_accum >= slope) {
				x_accum -= slope;
				if (down) {
					tmp = ((tmp >> 7) | (tmp << 1));
					if (tmp & 1) p += 128;
				} else {
					tmp = ((tmp << 7) | (tmp >> 1));
					if (tmp & 128) p -= 128;
				}
			}
		} while (--x1);
	} else {
		x_accum = 128;
		y1 = y2 - y1 + 1;
		do {
			*p |= tmp;
			x_accum += slope;
			if (x_accum >= 256) {
				p++;
				x_accum -= 256;
			}
			if (down) {
				tmp = ((tmp >> 7) | (tmp << 1));
				if (tmp & 1) p += 128;
			} else {
				tmp = ((tmp << 7) | (tmp >> 1));
				if (tmp & 128) p -= 128;
			}
		} while (--y1);
	}
#endif // SUPPORT_DIAGONAL_LINES
}


