
#include "taskWebServer.h"

// CodeRed - added #define extern on next line (else variables
// not defined). This has been done due to include the .h files
// rather than the .c files as in the original version of easyweb.
//#include "easyweb.h"
#define extern
#include "ethmac.h"
#include "tcpip.h"


#include <cr_section_macros.h>
#include <NXP/crp.h>
__CRP const unsigned int CRP_WORD = CRP_NO_CRP ;


extern xQueueHandle queueSdCardWrite;
extern xQueueHandle queueSdCardRead;

extern xSemaphoreHandle semSdCardReadAction;


// IP: 192.168.1.110

void taskWebServer (void *param)
{
	ezxml_t xml;
	msgSdCardRead msgSdCardR;
	msgSdCardWrite msgSdCardW;

//	semWebSD = xSemaphoreCreateMutex();
//	xSemaphoreTake(semWebSD,portMAX_DELAY);

	TCPLowLevelInit();
	xTaskCreate( taskTcpTick, (signed portCHAR *) "taskTcpTick"	, 240, NULL, 2, NULL );

	HTTPStatus = 0;                                // clear HTTP-server's flag register

	TCPLocalPort = TCP_PORT_HTTP;                  // set port we want to listen to


	while (1)                                      // repeat forever
	{
		if (!(SocketStatus & SOCK_ACTIVE)){						// listen for incoming TCP-connection
			TCPPassiveOpen();
		}

		NetworkEngine();

		///////////////////////////////

		if (SocketStatus & SOCK_CONNECTED){             // check if somebody has connected to our TCP

			if (SocketStatus & SOCK_DATA_AVAILABLE){      // check if remote TCP sent data

				memset(TCP_TX_BUF,'\0',sizeof(TCP_TX_BUF)); // Se limpia el buffer de salida

				if (SocketStatus & SOCK_TX_BUF_RELEASED){     // check if buffer is free for TX

					// Para acceder poner en el browser http://192.168.1.110:80
					if(TCPLocalPort == 80){

					/////////////////////////////////////////////////////
					// Se crea el html. Se concatena directamente sobre
					// el buffer de salida.
					/////////////////////////////////////////////////////

					strcpy(TCP_TX_BUF, "HTTP/1.0 200 OK\r\n");
					strcat(TCP_TX_BUF, "Content-Type: text/html\r\n");
					strcat(TCP_TX_BUF, "\r\n");

					strcat(TCP_TX_BUF, "<html>\r\n");

					/////////////////////////////////////////////////////
					// ENCABEZADO
					/////////////////////////////////////////////////////

					// Esta linea de http hace que la pagina se recague automaticamente cada 4 segundos
//					strcat(TCP_TX_BUF, "<meta http-equiv='refresh' content='4' >\r\n");
					strcat(TCP_TX_BUF, "<title>SMCED</title>\r\n");
					/////////////////////////////////////////////////////

						strcat(TCP_TX_BUF, "<form>\r\n");
							strcat(TCP_TX_BUF, "<b>Valores:</b>\r\n");

						xQueueSend(queueSdCardRead,&msgSdCardR,portMAX_DELAY);
//						xSemaphoreTake(semSdCardReadAction,portMAX_DELAY);

							strcat(TCP_TX_BUF, "-->\r\n");
						strcat(TCP_TX_BUF, "</form>");
//						while(uxQueueMessagesWaiting(queueSdCardWeb) == 0){
//
//							xQueueReceive(queueSdCardWeb,&msgSdWeb,500);
//							strcat(TCP_TX_BUF, msgSdWeb.data);
//						}

					}

	//				// Para acceder poner en el browser http://192.168.1.110:90
	//				if(TCPLocalPort == 90){
	//
	//				}


					TCPTxDataCount = strlen(TCP_TX_BUF);   // bytes to xfer

					TCPTransmitTxBuffer();                   // xfer buffer
					TCPClose();                              // and close connection
					HTTPBytesToSend = 0;                     // all data sent

					HTTPStatus |= HTTP_SEND_PAGE;              // ok, 1st loop executed
				}
			}
		}else{
			HTTPStatus &= ~HTTP_SEND_PAGE;               // reset help-flag if not connected
		}

		//////////////////////////////

		taskYIELD();
	}
}

extern void TCPClockHandler(void);

volatile uint32_t TimeTick = 0;
volatile uint32_t TimeTick2 = 0;


void taskTcpTick(void *param)
{
	const portTickType xDelay = 10 / portTICK_RATE_MS;

	while(1){

		TimeTick++;		// Increment first SysTick counter
		TimeTick2++;	// Increment second SysTick counter

		// After 100 ticks (100 x 10ms = 1sec)
		if (TimeTick >= 100) {
		  TimeTick = 0;	// Reset counter
		  LPC_GPIO1->FIOPIN ^= 1 << 25;	// Toggle user LED
		}
		// After 20 ticks (20 x 10ms = 1/5sec)
		if (TimeTick2 >= 20) {
		  TimeTick2 = 0; // Reset counter
		  TCPClockHandler();  // Call TCP handler
		}

		vTaskDelay( xDelay );
	}
}

