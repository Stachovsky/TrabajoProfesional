/*
===============================================================================
 Name        : main.c
 Author      : 
 Version     :
 Copyright   : Copyright (C) 
 Description : main definition
===============================================================================
*/

//#define DEBUG

#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif

#include <string.h>
#include <stdio.h>

#include <cr_section_macros.h>
#include <NXP/crp.h>
#include "API_Uart.h"
#include "lpc_types.h"

//Drivers
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_adc.h"

//-----------------------------------------------------------------
// inicializacion de perifericos
//-----------------------------------------------------------------
	static void init_adc(uint16_t adcFrec)
	{
		PINSEL_CFG_Type PinCfg;

		/*
		 * Init ADC pin connect
		 * AD0.0 on P0.23
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 23;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);

		/* Configuration for ADC :
		 * 	Frequency at 0.2Mhz
		 *  ADC channel 0, no Interrupt
		 */
		ADC_Init(LPC_ADC, adcFrec);
		ADC_IntConfig(LPC_ADC,ADC_CHANNEL_0,DISABLE);
		ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_0,ENABLE);

	}

//-----------------------------------------------------------------



// Variable to store CRP value in. Will be placed automatically
// by the linker when "Enable Code Read Protect" selected.
// See crp.h header for more information
__CRP const unsigned int CRP_WORD = CRP_NO_CRP ;

// TODO: insert other include files here

// TODO: insert other definitions and declarations here

int main(void) {

//---------------ADC------------------------
	uint16_t adcValue;
	uint8_t  strADC[50];
	uint16_t adcFrec=200000;


    init_adc(adcFrec);
    API_Uart_Config();

    while (1) {
    	ADC_StartCmd(LPC_ADC,ADC_START_NOW);
    				//Wait conversion complete
    	while (!(ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_0,ADC_DATA_DONE)));
    	adcValue = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_0);
    	sprintf(strADC,"Valor del Trimpod %d \n \r",adcValue);
    			//----------------UART-----------------------
       				API_UartSendString(strADC);
    }

//	ADC_StartCmd(LPC_ADC,ADC_START_NOW);
//	//Wait conversion complete
//	while (!(ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_0,ADC_DATA_DONE)));
//	adcValue = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_0);
//
////----------------UART-----------------------
//
//	API_UartSendByte(p_adcValue[1]);
//	API_UartSendByte(p_adcValue[0]);

//----------------UART-----------------------

//	uint8_t salida[50];
//	uint8_t dataAdc = 10;

//  sprintf((char*)salida,"Valor adc: %d \r \n",dataAdc);

//	#ifdef DEBUG

//	#endif

//	API_UartSendString((char*)salida);
//	API_Uart_Config();
//	API_UartSendByte('E');

// Enter an infinite loop, just incrementing a counter
	volatile static int i = 0 ;
	while(1) {
		i++ ;

	}
	return 0 ;
}
