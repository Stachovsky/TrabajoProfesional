/**
 * Name        : main.c
 * Version     :
 * Description : main definition for FreeRTOS application
 */

/*
 * FreeRTOS includes
 */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "uart.h"

#define USERTASK_STACK_SIZE configMINIMAL_STACK_SIZE

void __error__(char *pcFilename, unsigned long ulLine) {
}

static void setupHardware(void) {
	UARTInit(3, 9600);	/* baud rate setting */
}

void vUserTask1(void *pvParameters) {

	uint8_t nada[20];
	int8_t i;

//	API_EnableInterrupt(UART_PORT_3);
	const portTickType xDelay = 100 / portTICK_RATE_MS;

	while (1) {
		sprintf((char*)nada, "tick %d\r\n", (int)i++);
		UARTSend(3, nada ,  strlen(nada) );
		vTaskDelay( xDelay );
	}
}

/**
 * Program entry point 
 */
int main(void) {
	setupHardware();

/*
	 * Start the tasks defined within this file/specific to this demo. 
	 */
	xTaskCreate( vUserTask1, ( signed portCHAR * ) "Task1", 240, NULL, 1, NULL );

	/* 
	 * Start the scheduler. 
	 */
	vTaskStartScheduler();

	/* 
	 * Will only get here if there was insufficient memory to create the idle task. 
	 */
	return 1;
}
