/**
 * Name        : main.c
 * Version     :
 * Description : main definition for FreeRTOS application
 */

/*
 * FreeRTOS includes
 */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Tasks/PcCommunicaction/API_Uart.h"
#include "Tasks/KeepAlive/taskKeepAlive.h"

#define USERTASK_STACK_SIZE configMINIMAL_STACK_SIZE

void __error__(char *pcFilename, unsigned long ulLine) {
}

void interruptUart3(uint8_t c){

	uint8_t temp[15];
	API_UartDisableInterrupt(UART_PORT_3);

	sprintf((char*)temp, "llego %c\r\n", (char)c);
	API_UartSendString(UART_PORT_3,temp);

	API_UartEnableInterrupt(UART_PORT_3);
}

static void setupHardware(void) {

	// Se configuran los perifericos por defecto
	SystemInit();

}


/**
 * Program entry point 
 */
int main(void) {

	setupHardware();

	xTaskCreate( vUserTask1		, (signed portCHAR *) "Task1"		, 240, NULL, 2, NULL );
	xTaskCreate( taskKeepAlive	, (signed portCHAR *) "KeepAlive"	, 240, (int32_t*)1000, 1, NULL );

	/* Start the scheduler. */
	vTaskStartScheduler();

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 1;
}
