/**
 * Name        : main.c
 * Version     :
 * Description : main definition for FreeRTOS application
 */

/*
 * FreeRTOS includes
 */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Tasks/KeepAlive/taskKeepAlive.h"
#include "Tasks/PcCommunication/taskPcCommunication.h"
#include "Tasks/Core/taskCore.h"

#define USERTASK_STACK_SIZE configMINIMAL_STACK_SIZE

void __error__(char *pcFilename, unsigned long ulLine) {
}

static void setupHardware(void) {
	// Se configuran los perifericos por defecto
	SystemInit();
}

/**
 * Program entry point 
 */
int main(void) {

	setupHardware();

	xTaskCreate( taskKeepAlive			, (signed portCHAR *) "KeepAlive"	, 240, (int32_t*)1000,	1, NULL );
	xTaskCreate( taskPcCommunicationTx	, (signed portCHAR *) "PcComTx"		, 240, NULL,			2, NULL );
	xTaskCreate( taskPcCommunicationRx	, (signed portCHAR *) "PcComRx"		, 240, NULL,			3, NULL );
	xTaskCreate( taskCore				, (signed portCHAR *) "Core"		, 240, NULL,			5, NULL );

	/* Start the scheduler. */
	vTaskStartScheduler();

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 1;
}
